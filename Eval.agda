module Eval where
open import Data.List
open import Data.Maybe
open import Data.Bool as Bool renaming (Bool to Symbol; true to ùïÄ; false to ùïÜ)
open import Relation.Nullary using (yes; no)
open import Agda.Builtin.Equality
open import Lang
open import Proof
{-# FOREIGN GHC
  data ParseTree = Empty
    | IOO ParseTree ParseTree ParseTree ParseTree
    | OIO ParseTree ParseTree ParseTree ParseTree
    | OOI ParseTree ParseTree ParseTree ParseTree
    deriving Show
#-}
data ParseTree : Set where
  Empty : ParseTree
  IOO OIO OOI : (_ _ _ _ : ParseTree) ‚Üí ParseTree
{-# COMPILE GHC ParseTree = data ParseTree (Empty | IOO | OIO | OOI) #-}

forget : Lang Œ± ‚Üí ParseTree
forget ‚àÖ = Empty
forget (L I L‚ÇÅ O L‚ÇÇ O L‚ÇÉ) = IOO (forget L) (forget L‚ÇÅ) (forget L‚ÇÇ) (forget L‚ÇÉ)
forget (L O L‚ÇÅ I L‚ÇÇ O L‚ÇÉ) = OIO (forget L) (forget L‚ÇÅ) (forget L‚ÇÇ) (forget L‚ÇÉ)
forget (L O L‚ÇÅ O L‚ÇÇ I L‚ÇÉ) = OOI (forget L) (forget L‚ÇÅ) (forget L‚ÇÇ) (forget L‚ÇÉ)

reify : List Symbol ‚Üí Maybe ParseTree
reify Œ± with Good? Œ±
... | yes GŒ± = just (forget (parse {Œ±} GŒ±))
... | no _ = nothing
{-# COMPILE GHC reify as reify #-}
